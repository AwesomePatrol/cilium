// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by client-gen. DO NOT EDIT.

package v2alpha1

import (
	"context"
	"time"

	v2alpha1 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1"
	scheme "github.com/cilium/cilium/pkg/k8s/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CiliumFlowLogsGetter has a method to return a CiliumFlowLogInterface.
// A group's client should implement this interface.
type CiliumFlowLogsGetter interface {
	CiliumFlowLogs() CiliumFlowLogInterface
}

// CiliumFlowLogInterface has methods to work with CiliumFlowLog resources.
type CiliumFlowLogInterface interface {
	Create(ctx context.Context, ciliumFlowLog *v2alpha1.CiliumFlowLog, opts v1.CreateOptions) (*v2alpha1.CiliumFlowLog, error)
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v2alpha1.CiliumFlowLog, error)
	List(ctx context.Context, opts v1.ListOptions) (*v2alpha1.CiliumFlowLogList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	CiliumFlowLogExpansion
}

// ciliumFlowLogs implements CiliumFlowLogInterface
type ciliumFlowLogs struct {
	client rest.Interface
}

// newCiliumFlowLogs returns a CiliumFlowLogs
func newCiliumFlowLogs(c *CiliumV2alpha1Client) *ciliumFlowLogs {
	return &ciliumFlowLogs{
		client: c.RESTClient(),
	}
}

// Get takes name of the ciliumFlowLog, and returns the corresponding ciliumFlowLog object, and an error if there is any.
func (c *ciliumFlowLogs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v2alpha1.CiliumFlowLog, err error) {
	result = &v2alpha1.CiliumFlowLog{}
	err = c.client.Get().
		Resource("ciliumflowlogs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of CiliumFlowLogs that match those selectors.
func (c *ciliumFlowLogs) List(ctx context.Context, opts v1.ListOptions) (result *v2alpha1.CiliumFlowLogList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v2alpha1.CiliumFlowLogList{}
	err = c.client.Get().
		Resource("ciliumflowlogs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested ciliumFlowLogs.
func (c *ciliumFlowLogs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("ciliumflowlogs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a ciliumFlowLog and creates it.  Returns the server's representation of the ciliumFlowLog, and an error, if there is any.
func (c *ciliumFlowLogs) Create(ctx context.Context, ciliumFlowLog *v2alpha1.CiliumFlowLog, opts v1.CreateOptions) (result *v2alpha1.CiliumFlowLog, err error) {
	result = &v2alpha1.CiliumFlowLog{}
	err = c.client.Post().
		Resource("ciliumflowlogs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(ciliumFlowLog).
		Do(ctx).
		Into(result)
	return
}
