// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v2alpha1 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCiliumFlowLogs implements CiliumFlowLogInterface
type FakeCiliumFlowLogs struct {
	Fake *FakeCiliumV2alpha1
}

var ciliumflowlogsResource = v2alpha1.SchemeGroupVersion.WithResource("ciliumflowlogs")

var ciliumflowlogsKind = v2alpha1.SchemeGroupVersion.WithKind("CiliumFlowLog")

// Get takes name of the ciliumFlowLog, and returns the corresponding ciliumFlowLog object, and an error if there is any.
func (c *FakeCiliumFlowLogs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v2alpha1.CiliumFlowLog, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(ciliumflowlogsResource, name), &v2alpha1.CiliumFlowLog{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.CiliumFlowLog), err
}

// List takes label and field selectors, and returns the list of CiliumFlowLogs that match those selectors.
func (c *FakeCiliumFlowLogs) List(ctx context.Context, opts v1.ListOptions) (result *v2alpha1.CiliumFlowLogList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(ciliumflowlogsResource, ciliumflowlogsKind, opts), &v2alpha1.CiliumFlowLogList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v2alpha1.CiliumFlowLogList{ListMeta: obj.(*v2alpha1.CiliumFlowLogList).ListMeta}
	for _, item := range obj.(*v2alpha1.CiliumFlowLogList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested ciliumFlowLogs.
func (c *FakeCiliumFlowLogs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(ciliumflowlogsResource, opts))
}

// Create takes the representation of a ciliumFlowLog and creates it.  Returns the server's representation of the ciliumFlowLog, and an error, if there is any.
func (c *FakeCiliumFlowLogs) Create(ctx context.Context, ciliumFlowLog *v2alpha1.CiliumFlowLog, opts v1.CreateOptions) (result *v2alpha1.CiliumFlowLog, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(ciliumflowlogsResource, ciliumFlowLog), &v2alpha1.CiliumFlowLog{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.CiliumFlowLog), err
}
