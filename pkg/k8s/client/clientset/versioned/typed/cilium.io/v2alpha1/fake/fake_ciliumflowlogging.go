// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v2alpha1 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCiliumFlowLoggings implements CiliumFlowLoggingInterface
type FakeCiliumFlowLoggings struct {
	Fake *FakeCiliumV2alpha1
}

var ciliumflowloggingsResource = v2alpha1.SchemeGroupVersion.WithResource("ciliumflowloggings")

var ciliumflowloggingsKind = v2alpha1.SchemeGroupVersion.WithKind("CiliumFlowLogging")

// Get takes name of the ciliumFlowLogging, and returns the corresponding ciliumFlowLogging object, and an error if there is any.
func (c *FakeCiliumFlowLoggings) Get(ctx context.Context, name string, options v1.GetOptions) (result *v2alpha1.CiliumFlowLogging, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(ciliumflowloggingsResource, name), &v2alpha1.CiliumFlowLogging{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.CiliumFlowLogging), err
}

// List takes label and field selectors, and returns the list of CiliumFlowLoggings that match those selectors.
func (c *FakeCiliumFlowLoggings) List(ctx context.Context, opts v1.ListOptions) (result *v2alpha1.CiliumFlowLoggingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(ciliumflowloggingsResource, ciliumflowloggingsKind, opts), &v2alpha1.CiliumFlowLoggingList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v2alpha1.CiliumFlowLoggingList{ListMeta: obj.(*v2alpha1.CiliumFlowLoggingList).ListMeta}
	for _, item := range obj.(*v2alpha1.CiliumFlowLoggingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested ciliumFlowLoggings.
func (c *FakeCiliumFlowLoggings) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(ciliumflowloggingsResource, opts))
}
